<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Daniel Margol]]></title>
  <subtitle><![CDATA[blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://danielmargol.com/"/>
  <updated>2015-10-27T18:59:23.000Z</updated>
  <id>http://danielmargol.com/</id>
  
  <author>
    <name><![CDATA[Daniel Margol]]></name>
    <email><![CDATA[daniel.margol@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[How to create a choropleth map with GeoJSON and Google Maps]]></title>
    <link href="http://danielmargol.com/post/2015/06/10/how-to-create-a-choropleth-map-with-geojson-and-google-maps/"/>
    <id>http://danielmargol.com/post/2015/06/10/how-to-create-a-choropleth-map-with-geojson-and-google-maps/</id>
    <published>2015-06-10T16:34:35.000Z</published>
    <updated>2015-10-27T18:59:23.000Z</updated>
    <content type="html"><![CDATA[<p>Choropleth maps are straight up awesome at displaying statistical information for a given area. To paraphrase wikipedia, they are thematic maps which have areas shaded or patterned in proportion to a statistical value for that area. We will walk through Google Maps and GeoJSON to create and display a choropleth map like this one.<br><a id="more"></a><br><img src="/post/2015/06/10/how-to-create-a-choropleth-map-with-geojson-and-google-maps/choropleth.jpg" class="img-in-post" title="choropleth-map"></p>
<h3 id="GeoJSON">GeoJSON</h3><p>The GeoJSON file will use the geometry guidelines for each given area displayed. Plus, the file should have the statistical info you are going to represent in the properties field of each area. For example, I am using a GeoJSON file that has all the US states and I have added the property of COLI (Cost of Living Index) to each state. The object for Arizona in the array of state objects that I am using looks like this:</p>
<figure class="highlight json"><figcaption><span>GeoJSON File Sample</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"<span class="attribute">type</span>":<span class="value"><span class="string">"Feature"</span></span>,</span><br><span class="line">"<span class="attribute">properties</span>":<span class="value">&#123;"<span class="attribute">GEO_ID</span>":<span class="value"><span class="string">"0400000US04"</span></span>,"<span class="attribute">STATE</span>":<span class="value"><span class="string">"04"</span></span>,"<span class="attribute">NAME</span>":<span class="value"><span class="string">"Arizona"</span></span>,"<span class="attribute">LSAD</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">CENSUSAREA</span>":<span class="value"><span class="number">113594.084</span></span>,"<span class="attribute">ABVR</span>":<span class="value"><span class="string">"AZ"</span></span>,"<span class="attribute">COLI</span>":<span class="value"><span class="number">103.94696969696945</span></span>&#125;</span>,</span><br><span class="line">"<span class="attribute">geometry</span>":<span class="value">&#123;"<span class="attribute">type</span>":<span class="value"><span class="string">"Polygon"</span></span>,"<span class="attribute">coordinates</span>":<span class="value">['multi-dimensional array of latitude and longitude properties']</span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Setting_up_Google_Maps">Setting up Google Maps</h3><p>First, make sure to add the Google Map api script with all your other scripts in your index html file. Now you will need to create a div on the html view you want to display the map and give that div an id (I typically give it an id of map-canvas). You will want to give this div a height and width value in your css file. Next, you will want to setup the map options. Google Maps has bunch of map options so please read their documentation to configure the map to your liking. Finally, you will set the map by calling the Map function with the google maps api and pass in the ID of the html element and the map options.</p>
<figure class="highlight js"><figcaption><span>Setting up Google Maps</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// feel free to use whatever map options float your boat but here is what I use</span></span><br><span class="line"><span class="keyword">var</span> mapOptions = &#123;</span><br><span class="line">  zoom: <span class="number">4</span>,</span><br><span class="line">  scrollwheel: <span class="literal">false</span>,</span><br><span class="line">  center: <span class="keyword">new</span> google.maps.LatLng(<span class="number">40.00</span>, -<span class="number">98</span>),</span><br><span class="line">  mapTypeId: google.maps.MapTypeId.ROADMAP,</span><br><span class="line">  mapTypeControl: <span class="literal">false</span>,</span><br><span class="line">  mapTypeControlOptions: &#123;</span><br><span class="line">    mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.TERRAIN]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> google.maps.Map(<span class="built_in">document</span>.getElementById(<span class="string">'map-canvas'</span>), mapOptions);</span><br></pre></td></tr></table></figure>
<h3 id="Adding_the_GeoJSON_Data_Layer">Adding the GeoJSON Data Layer</h3><p>After Google Maps is beautifully displaying on your html, you will want to add the GeoJSON data layer to get the choropleth map. First, create a variable that will hold the data and call the google maps Data function. Next, you will call the function loadGeoJson on that variable that was just created. After that you will want to the set the map with the variable of the layer that has your GeoJSON data. Note that the final step of setting the data layer by calling setMap will need after any styling you want to add which will be described in the next section.  </p>
<figure class="highlight js"><figcaption><span>Adding GeoJSON Data Layer</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the state data layer and load the GeoJson Data</span></span><br><span class="line"><span class="keyword">var</span> stateLayer = <span class="keyword">new</span> google.maps.Data();</span><br><span class="line">stateLayer.loadGeoJson(<span class="string">'URL to GeoJSON file'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Final step here sets the stateLayer GeoJSON data onto the map</span></span><br><span class="line">stateLayer.setMap(map)</span><br></pre></td></tr></table></figure>
<h3 id="Styling_the_GeoJSON_Data_Layer">Styling the GeoJSON Data Layer</h3><p>Now we will want to style or GeoJSON to show the awesomeness of the choropleth map. First we are going to call the setStyle function on the data layer variable. In this function we will return the styling, for the fillColor property we will call another function that we create (lets call this getColor) that will return a color to style that area based on the value of the property. </p>
<figure class="highlight js"><figcaption><span>Styling GeoJSON Data Layer</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the state data layer and load the GeoJson Data</span></span><br><span class="line"><span class="keyword">var</span> stateLayer = <span class="keyword">new</span> google.maps.Data();</span><br><span class="line">stateLayer.loadGeoJson(<span class="string">'URL to GeoJSON file'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set and apply styling to the stateLayer</span></span><br><span class="line">stateLayer.setStyle(<span class="function"><span class="keyword">function</span>(<span class="params">feature</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    fillColor: getColor(feature.getProperty(<span class="string">'COLI'</span>)), <span class="comment">// call function to get color for state based on the COLI (Cost of Living Index)</span></span><br><span class="line">    fillOpacity: <span class="number">0.8</span>,</span><br><span class="line">    strokeColor: <span class="string">'#b3b3b3'</span>,</span><br><span class="line">    strokeWeight: <span class="number">1</span>,</span><br><span class="line">    zIndex: <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Final step here sets the stateLayer GeoJSON data onto the map</span></span><br><span class="line">stateLayer.setMap(map)</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns a color based on the value given when the function is called</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params">coli</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> coli &gt;= <span class="number">121</span> ? <span class="string">'#89a844'</span> :</span><br><span class="line">    coli &gt; <span class="number">110</span> ? <span class="string">'#acd033'</span> :</span><br><span class="line">    coli &gt; <span class="number">102.5</span> ? <span class="string">'#cbd97c'</span> :</span><br><span class="line">    coli &gt; <span class="number">100</span> ? <span class="string">'#c2c083'</span> :</span><br><span class="line">    <span class="string">'#d1ccad'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Adding_Listeners_for_More_Styling">Adding Listeners for More Styling</h3><p>Google Maps has cool functionality that allows us to add listeners to each property of our GeoJSON file. We can add mouseover, mouseout, click, and more. Here is an example.</p>
<figure class="highlight js"><figcaption><span>GeoJSON Data Layer</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add mouseover and mouse out styling for the GeoJSON State data</span></span><br><span class="line">stateLayer.addListener(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  stateLayer.overrideStyle(e.feature, &#123;</span><br><span class="line">    strokeColor: <span class="string">'#2a2a2a'</span>,</span><br><span class="line">    strokeWeight: <span class="number">2</span>,</span><br><span class="line">    zIndex: <span class="number">2</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">stateLayer.addListener(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  stateLayer.revertStyle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Conclusion">Conclusion</h3><p>Now you should have a choropleth styled Google Map in your html. The plunker I created to show this example is below. Note, I used Angular for the plunker example, but please feel free to use straight JavaScript or whatever JS framework you want.</p>
<a href="http://embed.plnkr.co/lf8rI0UyurUSXPRAzmKt/preview" title="http://embed.plnkr.co/lf8rI0UyurUSXPRAzmKt/preview [Plunker Example]" target="_blank" rel="external">Plunker Example:</a>
<iframe src="http://embed.plnkr.co/lf8rI0UyurUSXPRAzmKt/preview" width="100%" height="600" frameborder="0" allowfullscreen></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<p>Choropleth maps are straight up awesome at displaying statistical information for a given area. To paraphrase wikipedia, they are thematic maps which have areas shaded or patterned in proportion to a statistical value for that area. We will walk through Google Maps and GeoJSON to create and display a choropleth map like this one.<br>]]>
    
    </summary>
    
      <category term="GeoJSON" scheme="http://danielmargol.com/tags/GeoJSON/"/>
    
      <category term="JavaScript" scheme="http://danielmargol.com/tags/JavaScript/"/>
    
      <category term="Maps" scheme="http://danielmargol.com/tags/Maps/"/>
    
      <category term="JavaScript" scheme="http://danielmargol.com/categories/JavaScript/"/>
    
      <category term="Maps" scheme="http://danielmargol.com/categories/JavaScript/Maps/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My Road to Code]]></title>
    <link href="http://danielmargol.com/post/2015/06/01/road-to-code/"/>
    <id>http://danielmargol.com/post/2015/06/01/road-to-code/</id>
    <published>2015-06-02T03:18:34.000Z</published>
    <updated>2015-10-27T18:59:23.000Z</updated>
    <content type="html"><![CDATA[<p>Around this time last year I was halfway through my time at Fullstack Academy in New York City. Going to Fullstack was truly one of the best experiences I have ever had.<br><a id="more"></a><br>In 2010, a few years after undergrad, I moved to Washington, DC. Over the course of the next four years I ended up working at the accounting department of two different preschools. I liked accounting and entertained the idea that I would become a CPA. I registered for Accounting 1 and 2 at UDC (University of the District of Columbia). After completing those courses, I realized that ultimately accounting was not for me. I yearned for something else that held my attention and I was much more interested in.</p>
<p>During the Summer of 2012, I finally decided I did not want to take anymore accounting classes but had no clue what classes to register to for that fall semester. I felt like my current path was leading me more toward having jobs and I was really looking for a career path. After a lengthy discussion with a good friend, he convinced me to look into coding. I had some direction and decided to register for an Intro to Programming class. The class hooked me, so I completed Computer Science 1 and 2 over the next semesters while I still worked full time. After each class, I realized more and more that I wanted to go into this field and how much I enjoyed coding.</p>
<p>Fall semester 2013, I was newly married and finishing up my Computer Science 2 class. I was discussing with my wife about how much I really enjoyed coding and this was the field I want my career in. I talked with UDC about getting a masters degree in Computer Science since I already have a bachelor’s degree in Psychology. After my conversation with UDC Computer Science department, I realized that this would take me three to four years to complete while I worked full time. This was way too much time and I wanted to jump head first into this field. I did some research and found out about web development bootcamps. These bootcamps are in various cities around the country and usually were 3 months long plus you would come out at a junior developer level if you had no experience going in. The wife and I discussed that this was the best option even though it was a bit nerve racking since I would have to quit my job and move to another city (we live in DC) while I completed the bootcamp.</p>
<p>January of 2014 I dove head first into applying to multiple bootcamps. I studied Ruby and JavaScript to meet the demands of all the admission requirements of the different bootcamps I applied to. In total, I applied to eleven and was accepted into seven of them. This was a bit crazy and I was not expecting to get into as many as I did. I settled on attending Fullstack Academy for multiple reasons. First, Fullstack Academy is a Full-stack JavaScript bootcamp. Which means that I would be learning JavaScript to use on both the front end and backend. This made a lot of sense to me since I would be learning and focusing on one language which in my mind would be better than having to learn Ruby/Rails plus JavaScript at a Rails heavy bootcamp. Second, Fullstack is in NYC which is very close to DC, plus I would not need a car. Third, I already had some friends who live in NYC. Fourth, it is New York City and who wouldn’t want to try living there for at least a little bit?</p>
<p>I gave my employer at the time an eight-week notice that I would be leaving in April (2014) and changing my career path in order attend Fullstack Academy. They were really receptive and I could not wait to get up to NYC to start the bootcamp. April comes, and I cannot say enough about how amazing my experience was at Fullstack Academy. David and Nimit, the co-founders and main instructors while I was there (3rd cohort) were top notch and two of the best teachers that I have come across. They were both very patient, insightful and had a good sense of humor. Also, my fellow classmates were all amazing. We had a blast together, learning and hanging out after class. The first six weeks of Fullstack was the learning phase, followed by a break week, which was much needed. After that we embarked on the project phase for the final six weeks of the thirteen weeks that we were there. During this time, I made a couple of projects. My personal project Morning Ninja, which was my wife’s idea, sends users a text message with the summary of the day’s weather for their area at the time they select. My group project Job Butler, was job search organizing tool that I actually used during my job search after graduating and moving back to DC.</p>
<p>In October 2014 I accepted a position with Vizuri in the DC area. This was it. This was the end of my road to changing my career, but the start of my journey to continual learning and growing as a developer. That’s my path until now.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Around this time last year I was halfway through my time at Fullstack Academy in New York City. Going to Fullstack was truly one of the best experiences I have ever had.<br>]]>
    
    </summary>
    
      <category term="Fullstack Academy" scheme="http://danielmargol.com/tags/Fullstack-Academy/"/>
    
      <category term="JavaScript" scheme="http://danielmargol.com/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="http://danielmargol.com/categories/JavaScript/"/>
    
  </entry>
  
</feed>
